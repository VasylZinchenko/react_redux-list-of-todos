{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","types/Todo.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["SortType","actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","ALL","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","filteredTodos","dispatch","className","map","id","completed","classNames","title","onClick","currentTodoActions","setTodo","TodoFilter","value","onChange","event","dispatchAction","filterActions","target","ACTIVE","COMPLETED","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isModalCardOpen","setIsModalCardOpen","loadUsers","a","userId","usersFromServer","useEffect","href","email","name","checkQuery","content","toLowerCase","includes","App","isLoaded","setIsLoaded","loadTodos","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.feeeb9e6.chunk.js","sourcesContent":["export enum SortType {\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n  ALL = 'all',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = { type: 'currentTodo/SET'; payload: Todo };\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (state: State = null, action: Action): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { SortType } from '../types/Status';\n\ntype SetVisibilityFilter = { type: 'filter/SORTTYPE'; payload: SortType };\ntype SetQuery = { type: 'filter/QUERY'; payload: string };\n\ntype Action = SetVisibilityFilter | SetQuery;\ntype State = { query: string; status: SortType };\n\nconst setFilter = (payload:SortType):SetVisibilityFilter => ({\n  type: 'filter/SORTTYPE',\n  payload,\n});\n\nconst setQuery = (payload:string):SetQuery => ({\n  type: 'filter/QUERY',\n  payload,\n});\n\nconst initialState: State = {\n  query: '',\n  status: SortType.ALL,\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action:Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SORTTYPE':\n      return { ...state, status: action.payload };\n\n    case 'filter/QUERY':\n      return { ...state, query: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = {\n  setFilter, setQuery,\n};\n\nexport default filterReducer;\n","export interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\nexport enum SortType {\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n  ALL = 'all',\n}\n","import { Todo } from '../types/Todo';\n\ntype AddAction = {\n  type: 'todos/LOAD';\n  payload: Todo[]\n};\n\nconst load = (todos: Todo[]): AddAction => ({\n  type: 'todos/LOAD',\n  payload: todos,\n});\n\nexport const actions = { load };\n\nconst todosReducer = (todos: Todo[] = [], action: AddAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/LOAD':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\ntype Props = {\n  filteredTodos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({\n  filteredTodos,\n}) => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const setTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const removeTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                'has-text-success',\n                {\n                  'has-text-danger': !todo.completed,\n                },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              {currentTodo?.id === todo.id\n                ? (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button is-link\"\n                    type=\"button\"\n                    onClick={() => {\n                      removeTodo();\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                ) : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      setTodo(todo);\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { SortType } from '../../types/Todo';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const filter = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const newSortType = event.target.value as SortType;\n    const dispatchAction = (type:SortType) => {\n      dispatch(filterActions.setFilter(type));\n    };\n\n    switch (newSortType) {\n      case SortType.ACTIVE:\n        return dispatchAction(SortType.ACTIVE);\n\n      case SortType.COMPLETED:\n        return dispatchAction(SortType.COMPLETED);\n\n      default:\n        return dispatchAction(SortType.ALL);\n    }\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    return dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleReset = () => dispatch(filterActions.setQuery(''));\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter}\n            onChange={handleSelect}\n          >\n            <option value={SortType.ALL}>All</option>\n            <option value={SortType.ACTIVE}>Active</option>\n            <option value={SortType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInput}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span\n          className=\"icon is-right\"\n          style={{ pointerEvents: 'all' }}\n        >\n          {query && (\n            <>\n              <button\n                aria-label=\"reset\"\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handleReset}\n              />\n            </>\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import classNames from 'classnames';\nimport { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isModalCardOpen, setIsModalCardOpen] = useState(true);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const removeTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  const loadUsers = async () => {\n    if (currentTodo) {\n      const usersFromServer = await getUser(currentTodo.userId);\n\n      setUser(usersFromServer);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  if (!isModalCardOpen) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              aria-label=\"delete\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setIsModalCardOpen(false);\n                removeTodo();\n              }}\n            />\n\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames(\n                'has-text-success',\n                {\n                  'has-text-danger': !currentTodo?.completed,\n                },\n              )}\n              >\n                {\n                  currentTodo?.completed\n                    ? 'Done'\n                    : 'Planned'\n                }\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { SortType } from './types/Status';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/todos';\n\nexport function checkQuery(query:string, content:string) {\n  return (content.toLowerCase())\n    .includes(query.toLowerCase());\n}\n\nexport const App: React.FC = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const dispatch = useAppDispatch();\n  const todos:Todo[] = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const loadTodos = async () => {\n    const todosFromServer = await getTodos();\n\n    setIsLoaded(true);\n    dispatch(actions.load(todosFromServer));\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const filteredTodos = todos\n    .filter(({ completed, title }) => {\n      switch (filter) {\n        case SortType.ACTIVE:\n          return !completed && checkQuery(query, title);\n\n        case SortType.COMPLETED:\n          return completed && checkQuery(query, title);\n\n        default:\n          return checkQuery(query, title);\n      }\n    });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n            <div className=\"block\">\n              {\n                !isLoaded\n                  ? <Loader />\n                  : (\n                    <TodoList\n                      filteredTodos={filteredTodos}\n                    />\n                  )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}